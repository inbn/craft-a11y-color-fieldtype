{"version":3,"sources":["A11ycolor.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","process","__filename","requireFn","makeRequire","stringRequire","defineCache","loaderCache","alreadyCalled","path","normalize","name","baseName","baseParts","charAt","ary","part","splice","trimDots","split","slice","concat","join","runFactory","id","deps","factory","m","result","uri","map","depName","undefined","apply","define","Array","isArray","systemRequire","relId","amdRequire","callback","nextTick","toUrl","filePath","indexOf","dirname","filename","arguments","prefix","plugin","relName","index","originalId","hasOwnProperty","substring","load","value","fromText","text","makeLoad","amd","this","_process","2","ColorContrastChecker","prototype","fontSize","rgbClass","toString","g","b","isValidSixDigitColorCode","hex","test","isValidThreeDigitColorCode","isValidColorCode","convertColorToSixDigit","hexToLuminance","color","getRGBFromHex","LRGB","calculateLRGB","calculateLuminance","check","colorA","colorB","l1","l2","contrastRatio","getContrastRatio","verifyContrastRatio","checkPairs","pairs","results","pair","push","lRGB","isLevelAA","WCAG_AA","isLevelAAA","WCAG_AAA","rVal","gVal","bVal","rgb","Object","create","parseInt","calculateSRGB","key","sRGB","parseFloat","val","Math","pow","lumA","lumB","lighter","darker","ratio","amdefine","3","normalizeArray","parts","allowAboveRoot","up","last","unshift","splitPathRe","splitPath","exec","filter","xs","res","resolve","resolvedPath","resolvedAbsolute","cwd","TypeError","p","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","arr","start","end","fromParts","toParts","min","samePartsLength","outputParts","sep","delimiter","root","dir","basename","ext","extname","str","len","4","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","umask","5","$","window","document","pluginName","defaults","Plugin","element","options","extend","_defaults","_name","init","_this","colorContrastChecker","$colorFieldContainer","$colorField","find","proxy","updateColorContrast","contrastColor","fieldColor","console","log","fn","each","data","jQuery","color-contrast-checker"],"mappings":"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","file":"A11ycolor.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n(function (process,__filename){\n/** vim: et:ts=4:sw=4:sts=4\n * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/amdefine for details\n */\n\n/*jslint node: true */\n/*global module, process */\n'use strict';\n\n/**\n * Creates a define for node.\n * @param {Object} module the \"module\" object that is defined by Node for the\n * current module.\n * @param {Function} [requireFn]. Node's require function for the current module.\n * It only needs to be passed in Node versions before 0.5, when module.require\n * did not exist.\n * @returns {Function} a define function that is usable for the current node\n * module.\n */\nfunction amdefine(module, requireFn) {\n    'use strict';\n    var defineCache = {},\n        loaderCache = {},\n        alreadyCalled = false,\n        path = require('path'),\n        makeRequire, stringRequire;\n\n    /**\n     * Trims the . and .. from an array of path segments.\n     * It will keep a leading path segment if a .. will become\n     * the first path segment, to help with module name lookups,\n     * which act like paths, but can be remapped. But the end result,\n     * all paths that use this function should look normalized.\n     * NOTE: this method MODIFIES the input array.\n     * @param {Array} ary the array of path segments.\n     */\n    function trimDots(ary) {\n        var i, part;\n        for (i = 0; ary[i]; i+= 1) {\n            part = ary[i];\n            if (part === '.') {\n                ary.splice(i, 1);\n                i -= 1;\n            } else if (part === '..') {\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                    //End of the line. Keep at least one non-dot\n                    //path segment at the front so it can be mapped\n                    //correctly to disk. Otherwise, there is likely\n                    //no path mapping for a path starting with '..'.\n                    //This can still fail, but catches the most reasonable\n                    //uses of ..\n                    break;\n                } else if (i > 0) {\n                    ary.splice(i - 1, 2);\n                    i -= 2;\n                }\n            }\n        }\n    }\n\n    function normalize(name, baseName) {\n        var baseParts;\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === '.') {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                baseParts = baseName.split('/');\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                baseParts = baseParts.concat(name.split('/'));\n                trimDots(baseParts);\n                name = baseParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    /**\n     * Create the normalize() function passed to a loader plugin's\n     * normalize method.\n     */\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(id) {\n        function load(value) {\n            loaderCache[id] = value;\n        }\n\n        load.fromText = function (id, text) {\n            //This one is difficult because the text can/probably uses\n            //define, and any relative paths and requires should be relative\n            //to that id was it would be found on disk. But this would require\n            //bootstrapping a module/require fairly deeply from node core.\n            //Not sure how best to go about that yet.\n            throw new Error('amdefine does not implement load.fromText');\n        };\n\n        return load;\n    }\n\n    makeRequire = function (systemRequire, exports, module, relId) {\n        function amdRequire(deps, callback) {\n            if (typeof deps === 'string') {\n                //Synchronous, single module require('')\n                return stringRequire(systemRequire, exports, module, deps, relId);\n            } else {\n                //Array of dependencies with a callback.\n\n                //Convert the dependencies to modules.\n                deps = deps.map(function (depName) {\n                    return stringRequire(systemRequire, exports, module, depName, relId);\n                });\n\n                //Wait for next tick to call back the require call.\n                if (callback) {\n                    process.nextTick(function () {\n                        callback.apply(null, deps);\n                    });\n                }\n            }\n        }\n\n        amdRequire.toUrl = function (filePath) {\n            if (filePath.indexOf('.') === 0) {\n                return normalize(filePath, path.dirname(module.filename));\n            } else {\n                return filePath;\n            }\n        };\n\n        return amdRequire;\n    };\n\n    //Favor explicit value, passed in if the module wants to support Node 0.4.\n    requireFn = requireFn || function req() {\n        return module.require.apply(module, arguments);\n    };\n\n    function runFactory(id, deps, factory) {\n        var r, e, m, result;\n\n        if (id) {\n            e = loaderCache[id] = {};\n            m = {\n                id: id,\n                uri: __filename,\n                exports: e\n            };\n            r = makeRequire(requireFn, e, m, id);\n        } else {\n            //Only support one define call per file\n            if (alreadyCalled) {\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\n            }\n            alreadyCalled = true;\n\n            //Use the real variables from node\n            //Use module.exports for exports, since\n            //the exports in here is amdefine exports.\n            e = module.exports;\n            m = module;\n            r = makeRequire(requireFn, e, m, module.id);\n        }\n\n        //If there are dependencies, they are strings, so need\n        //to convert them to dependency values.\n        if (deps) {\n            deps = deps.map(function (depName) {\n                return r(depName);\n            });\n        }\n\n        //Call the factory with the right dependencies.\n        if (typeof factory === 'function') {\n            result = factory.apply(m.exports, deps);\n        } else {\n            result = factory;\n        }\n\n        if (result !== undefined) {\n            m.exports = result;\n            if (id) {\n                loaderCache[id] = m.exports;\n            }\n        }\n    }\n\n    stringRequire = function (systemRequire, exports, module, id, relId) {\n        //Split the ID by a ! so that\n        var index = id.indexOf('!'),\n            originalId = id,\n            prefix, plugin;\n\n        if (index === -1) {\n            id = normalize(id, relId);\n\n            //Straight module lookup. If it is one of the special dependencies,\n            //deal with it, otherwise, delegate to node.\n            if (id === 'require') {\n                return makeRequire(systemRequire, exports, module, relId);\n            } else if (id === 'exports') {\n                return exports;\n            } else if (id === 'module') {\n                return module;\n            } else if (loaderCache.hasOwnProperty(id)) {\n                return loaderCache[id];\n            } else if (defineCache[id]) {\n                runFactory.apply(null, defineCache[id]);\n                return loaderCache[id];\n            } else {\n                if(systemRequire) {\n                    return systemRequire(originalId);\n                } else {\n                    throw new Error('No module with ID: ' + id);\n                }\n            }\n        } else {\n            //There is a plugin in play.\n            prefix = id.substring(0, index);\n            id = id.substring(index + 1, id.length);\n\n            plugin = stringRequire(systemRequire, exports, module, prefix, relId);\n\n            if (plugin.normalize) {\n                id = plugin.normalize(id, makeNormalize(relId));\n            } else {\n                //Normalize the ID normally.\n                id = normalize(id, relId);\n            }\n\n            if (loaderCache[id]) {\n                return loaderCache[id];\n            } else {\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\n\n                return loaderCache[id];\n            }\n        }\n    };\n\n    //Create a define function specific to the module asking for amdefine.\n    function define(id, deps, factory) {\n        if (Array.isArray(id)) {\n            factory = deps;\n            deps = id;\n            id = undefined;\n        } else if (typeof id !== 'string') {\n            factory = id;\n            id = deps = undefined;\n        }\n\n        if (deps && !Array.isArray(deps)) {\n            factory = deps;\n            deps = undefined;\n        }\n\n        if (!deps) {\n            deps = ['require', 'exports', 'module'];\n        }\n\n        //Set up properties for this module. If an ID, then use\n        //internal cache. If no ID, then use the external variables\n        //for this node module.\n        if (id) {\n            //Put the module in deep freeze until there is a\n            //require call for it.\n            defineCache[id] = [id, deps, factory];\n        } else {\n            runFactory(id, deps, factory);\n        }\n    }\n\n    //define.require, which has access to all the values in the\n    //cache. Useful for AMD modules that all have IDs in the file,\n    //but need to finally export a value to node based on one of those\n    //IDs.\n    define.require = function (id) {\n        if (loaderCache[id]) {\n            return loaderCache[id];\n        }\n\n        if (defineCache[id]) {\n            runFactory.apply(null, defineCache[id]);\n            return loaderCache[id];\n        }\n    };\n\n    define.amd = {};\n\n    return define;\n}\n\nmodule.exports = amdefine;\n\n}).call(this,require('_process'),\"/node_modules/amdefine/amdefine.js\")\n\n},{\"_process\":4,\"path\":3}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Color Contast Checker\n * An accessibility checker tool for validating the color contrast based on WCAG 2.0 standard.\n * var ccc = new ColorContrastChecker();\n\n * var color1 = \"#FFFFFF\";\n * var color2 = \"#000000;\n\n * if (ccc.isLevelAA(color1, color2, 14)) {\n *     alert(\"Valid Level AA\");\n * } else {\n *     alert(\"Invalid Contrast\");\n * }\n */\n\nvar amdefine = false;\nif (typeof define !== 'function')\n    var define = require('amdefine')(module, require),\n        amdefine = true;\n\ndefine(function (require, exports, module) {\n\n    var ColorContrastChecker = function() {};\n\n    ColorContrastChecker.prototype = {\n        fontSize: 14,\n        rgbClass : {\n            toString: function() {\n                return '<r: ' + this.r +\n                    ' g: ' + this.g +\n                    ' b: ' + this.b +\n                    ' >';\n            }\n        },\n        isValidSixDigitColorCode: function (hex){\n            var regSixDigitColorcode = /^(#)?([0-9a-fA-F]{6})([0-9a-fA-F]{6})?$/;\n            return regSixDigitColorcode.test(hex);\n        },\n        isValidThreeDigitColorCode: function (hex){\n            var regThreeDigitColorcode = /^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$/;\n            return regThreeDigitColorcode.test(hex);\n        },\n        isValidColorCode : function (hex){\n            return this.isValidSixDigitColorCode(hex) || this.isValidThreeDigitColorCode(hex);\n        },\n        convertColorToSixDigit: function (hex) {\n          return '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n        },\n        hexToLuminance: function (color) {\n            if (!this.isValidColorCode(color)) {\n                throw new Error(\"Invalid Color :\" + color);\n            }\n\n            if (this.isValidThreeDigitColorCode(color)) {\n              color = this.convertColorToSixDigit(color);\n            }\n\n            color = this.getRGBFromHex(color);\n\n            var LRGB = this.calculateLRGB(color);\n\n            return this.calculateLuminance(LRGB);\n        },\n        check: function (colorA, colorB, fontSize) {\n            if (typeof fontSize !== 'undefined') {\n                this.fontSize = fontSize;\n            }\n\n            if(!colorA || !colorB) {\n                return false;\n            }\n\n            var l1 = this.hexToLuminance(colorA); /* higher value */\n            var l2 = this.hexToLuminance(colorB); /* lower value */\n            var contrastRatio = this.getContrastRatio(l1, l2);\n\n            return this.verifyContrastRatio(contrastRatio);\n        },\n        checkPairs: function (pairs) {\n            var results = [];\n\n            for (var i in pairs) {\n                var pair = pairs[i];\n                if (typeof pair.fontSize !== 'undefined') {\n                    results.push(\n                        this.check(\n                            pair.colorA,\n                            pair.colorB,\n                            pair.fontSize\n                        )\n                    );\n                } else {\n                    results.push(\n                        this.check(\n                            pair.colorA,\n                            pair.colorB\n                        )\n                    );\n                }\n            }\n            return results;\n        },\n        calculateLuminance: function(lRGB) {\n            return (0.2126 * lRGB.r) + (0.7152 * lRGB.g) + (0.0722 * lRGB.b);\n        },\n        isLevelAA : function(colorA, colorB, fontSize) {\n            var result = this.check(colorA, colorB, fontSize);\n            return result.WCAG_AA;\n        },\n        isLevelAAA : function(colorA, colorB, fontSize) {\n            var result = this.check(colorA, colorB, fontSize);\n            return result.WCAG_AAA;\n        },\n        getRGBFromHex : function(color) {\n\n            var rgb = Object.create(this.rgbClass),\n                rVal,\n                gVal,\n                bVal;\n\n            if (typeof color !== 'string') {\n                throw new Error('must use string');\n            }\n\n            rVal = parseInt(color.slice(1, 3), 16);\n            gVal = parseInt(color.slice(3, 5), 16);\n            bVal = parseInt(color.slice(5, 7), 16);\n\n            rgb.r = rVal;\n            rgb.g = gVal;\n            rgb.b = bVal;\n\n            return rgb;\n        },\n        calculateSRGB : function(rgb) {\n            var sRGB = Object.create(this.rgbClass),\n                key;\n\n            for (key in rgb) {\n                if (rgb.hasOwnProperty(key)) {\n                    sRGB[key] = parseFloat((rgb[key] / 255), 10);\n                }\n            }\n\n            return sRGB;\n        },\n        calculateLRGB: function (rgb) {\n            var sRGB = this.calculateSRGB(rgb);\n            var lRGB = Object.create(this.rgbClass),\n                key,\n                val = 0;\n\n            for (key in sRGB) {\n                if (sRGB.hasOwnProperty(key)) {\n                    val = parseFloat(sRGB[key], 10);\n                    if (val <= 0.03928) {\n                        lRGB[key] = (val / 12.92);\n                    } else {\n                        lRGB[key] = Math.pow(((val + 0.055) / 1.055), 2.4);\n                    }\n                }\n            }\n\n            return lRGB;\n        },\n        getContrastRatio : function(lumA, lumB) {\n            var ratio,\n                lighter,\n                darker;\n\n            if (lumA >= lumB) {\n                lighter = lumA;\n                darker = lumB;\n            } else {\n                lighter = lumB;\n                darker = lumA;\n            }\n\n            ratio = (lighter + 0.05) / (darker + 0.05);\n\n            return ratio;\n        },\n        verifyContrastRatio : function(ratio) {\n\n\n            var resultsClass = {\n                toString: function() {\n                    return '< WCAG-AA: ' + ((this.WCAG_AA) ? 'pass' : 'fail') +\n                        ' WCAG-AAA: ' + ((this.WCAG_AAA) ? 'pass' : 'fail') +\n                        ' >';\n                }\n            };\n            var WCAG_REQ_RATIO_AA_LG = 3.0,\n                WCAG_REQ_RATIO_AA_SM = 4.5,\n                WCAG_REQ_RATIO_AAA_LG = 4.5,\n                WCAG_REQ_RATIO_AAA_SM = 7.0,\n                WCAG_FONT_CUTOFF = 18;\n\n            var results = Object.create(resultsClass),\n                fontSize = this.fontSize || 14;\n\n            if (fontSize >= WCAG_FONT_CUTOFF) {\n                results.WCAG_AA = (ratio >= WCAG_REQ_RATIO_AA_LG);\n                results.WCAG_AAA = (ratio >= WCAG_REQ_RATIO_AAA_LG);\n            } else {\n                results.WCAG_AA = (ratio >= WCAG_REQ_RATIO_AA_SM);\n                results.WCAG_AAA = (ratio >= WCAG_REQ_RATIO_AAA_SM);\n            }\n\n            return results;\n        }\n\n    };\n\n    return ColorContrastChecker;\n});\n\n},{\"amdefine\":1}],3:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require('_process'))\n\n},{\"_process\":4}],4:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],5:[function(require,module,exports){\n/**\n * A11y color fieldtype plugin for Craft CMS\n *\n * A11ycolor Field JS\n *\n * @author    Iain Bean\n * @copyright Copyright (c) 2018 Iain Bean\n * @link      https://iainbean.com\n * @package   A11yColorFieldtype\n * @since     1.0.0A11yColorFieldtypeA11ycolor\n */\n\nvar ColorContrastChecker = require('color-contrast-checker');\n\n(function ($, window, document, undefined) {\n  var pluginName = 'A11yColorField';\n  var defaults = {};\n\n  // Plugin constructor\n  function Plugin(element, options) {\n    this.element = element;\n\n    this.options = $.extend({}, defaults, options);\n\n    this._defaults = defaults;\n    this._name = pluginName;\n\n    this.init();\n  }\n\n  Plugin.prototype = {\n    init: function (id) {\n      var _this = this;\n\n      this.colorContrastChecker = new ColorContrastChecker();\n\n      $(function () {\n        var $colorFieldContainer = $(_this.element);\n\n        _this.$colorField = $colorFieldContainer.find('[name=\"fields[' + _this.options.id + ']\"]');\n\n        // Add event listener\n        _this.$colorField.on('input', $.proxy(_this.updateColorContrast, _this));\n      });\n    },\n\n    updateColorContrast: function () {\n      var contrastColor = this.options.contrastColor;\n      var fieldColor = this.$colorField[0].value;\n      var fontSize = 14;\n\n      // Check if this is a valid 3 or 6 character hex code\n      if (this.colorContrastChecker.isValidColorCode(fieldColor)) {\n        // Get the ratio\n        var l1 = this.colorContrastChecker.hexToLuminance(contrastColor); /* higher value */\n        var l2 = this.colorContrastChecker.hexToLuminance(fieldColor); /* lower value */\n        var contrastRatio = this.colorContrastChecker.getContrastRatio(l1, l2);\n        // Is it valid?\n        console.log(this.colorContrastChecker.check(contrastColor, fieldColor, fontSize));\n      } else {\n        console.log('Invalid Hex');\n      }\n    }\n  };\n\n  // A really lightweight plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, 'plugin_' + pluginName)) {\n        $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n      }\n    });\n  };\n})(jQuery, window, document);\n\n},{\"color-contrast-checker\":2}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}