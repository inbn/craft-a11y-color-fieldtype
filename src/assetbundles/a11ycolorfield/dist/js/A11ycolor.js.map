{"version":3,"sources":["A11ycolor.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","process","__filename","requireFn","makeRequire","stringRequire","defineCache","loaderCache","alreadyCalled","path","normalize","name","baseName","baseParts","charAt","ary","part","splice","trimDots","split","slice","concat","join","runFactory","id","deps","factory","m","result","uri","map","depName","undefined","apply","define","Array","isArray","systemRequire","relId","amdRequire","callback","nextTick","toUrl","filePath","indexOf","dirname","filename","arguments","prefix","plugin","relName","index","originalId","substring","load","value","fromText","text","makeLoad","hasOwnProperty","amd","this","_process","2","ColorContrastChecker","prototype","fontSize","rgbClass","toString","g","b","isValidSixDigitColorCode","hex","test","isValidThreeDigitColorCode","isValidColorCode","convertColorToSixDigit","hexToLuminance","color","getRGBFromHex","LRGB","calculateLRGB","calculateLuminance","check","colorA","colorB","l1","l2","contrastRatio","getContrastRatio","verifyContrastRatio","checkPairs","pairs","results","pair","push","lRGB","isLevelAA","WCAG_AA","isLevelAAA","WCAG_AAA","rVal","gVal","bVal","rgb","Object","create","parseInt","calculateSRGB","key","sRGB","parseFloat","val","Math","pow","lumA","lumB","lighter","darker","ratio","amdefine","3","normalizeArray","parts","allowAboveRoot","up","last","unshift","filter","xs","res","resolve","resolvedPath","resolvedAbsolute","cwd","TypeError","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","arr","start","end","fromParts","toParts","min","samePartsLength","outputParts","sep","delimiter","charCodeAt","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","len","4","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","5","$","window","document","pluginName","defaults","Plugin","element","options","extend","_defaults","_name","init","_this","colorContrastChecker","$colorFieldContainer","$colorField","find","proxy","updateColorContrast","event","contrastColor","fieldColor","currentTarget","console","log","fn","each","data","jQuery","color-contrast-checker"],"mappings":"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","file":"A11ycolor.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function (process,__filename){\n/** vim: et:ts=4:sw=4:sts=4\n * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/amdefine for details\n */\n\n/*jslint node: true */\n/*global module, process */\n'use strict';\n\n/**\n * Creates a define for node.\n * @param {Object} module the \"module\" object that is defined by Node for the\n * current module.\n * @param {Function} [requireFn]. Node's require function for the current module.\n * It only needs to be passed in Node versions before 0.5, when module.require\n * did not exist.\n * @returns {Function} a define function that is usable for the current node\n * module.\n */\nfunction amdefine(module, requireFn) {\n    'use strict';\n    var defineCache = {},\n        loaderCache = {},\n        alreadyCalled = false,\n        path = require('path'),\n        makeRequire, stringRequire;\n\n    /**\n     * Trims the . and .. from an array of path segments.\n     * It will keep a leading path segment if a .. will become\n     * the first path segment, to help with module name lookups,\n     * which act like paths, but can be remapped. But the end result,\n     * all paths that use this function should look normalized.\n     * NOTE: this method MODIFIES the input array.\n     * @param {Array} ary the array of path segments.\n     */\n    function trimDots(ary) {\n        var i, part;\n        for (i = 0; ary[i]; i+= 1) {\n            part = ary[i];\n            if (part === '.') {\n                ary.splice(i, 1);\n                i -= 1;\n            } else if (part === '..') {\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                    //End of the line. Keep at least one non-dot\n                    //path segment at the front so it can be mapped\n                    //correctly to disk. Otherwise, there is likely\n                    //no path mapping for a path starting with '..'.\n                    //This can still fail, but catches the most reasonable\n                    //uses of ..\n                    break;\n                } else if (i > 0) {\n                    ary.splice(i - 1, 2);\n                    i -= 2;\n                }\n            }\n        }\n    }\n\n    function normalize(name, baseName) {\n        var baseParts;\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === '.') {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                baseParts = baseName.split('/');\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                baseParts = baseParts.concat(name.split('/'));\n                trimDots(baseParts);\n                name = baseParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    /**\n     * Create the normalize() function passed to a loader plugin's\n     * normalize method.\n     */\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(id) {\n        function load(value) {\n            loaderCache[id] = value;\n        }\n\n        load.fromText = function (id, text) {\n            //This one is difficult because the text can/probably uses\n            //define, and any relative paths and requires should be relative\n            //to that id was it would be found on disk. But this would require\n            //bootstrapping a module/require fairly deeply from node core.\n            //Not sure how best to go about that yet.\n            throw new Error('amdefine does not implement load.fromText');\n        };\n\n        return load;\n    }\n\n    makeRequire = function (systemRequire, exports, module, relId) {\n        function amdRequire(deps, callback) {\n            if (typeof deps === 'string') {\n                //Synchronous, single module require('')\n                return stringRequire(systemRequire, exports, module, deps, relId);\n            } else {\n                //Array of dependencies with a callback.\n\n                //Convert the dependencies to modules.\n                deps = deps.map(function (depName) {\n                    return stringRequire(systemRequire, exports, module, depName, relId);\n                });\n\n                //Wait for next tick to call back the require call.\n                if (callback) {\n                    process.nextTick(function () {\n                        callback.apply(null, deps);\n                    });\n                }\n            }\n        }\n\n        amdRequire.toUrl = function (filePath) {\n            if (filePath.indexOf('.') === 0) {\n                return normalize(filePath, path.dirname(module.filename));\n            } else {\n                return filePath;\n            }\n        };\n\n        return amdRequire;\n    };\n\n    //Favor explicit value, passed in if the module wants to support Node 0.4.\n    requireFn = requireFn || function req() {\n        return module.require.apply(module, arguments);\n    };\n\n    function runFactory(id, deps, factory) {\n        var r, e, m, result;\n\n        if (id) {\n            e = loaderCache[id] = {};\n            m = {\n                id: id,\n                uri: __filename,\n                exports: e\n            };\n            r = makeRequire(requireFn, e, m, id);\n        } else {\n            //Only support one define call per file\n            if (alreadyCalled) {\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\n            }\n            alreadyCalled = true;\n\n            //Use the real variables from node\n            //Use module.exports for exports, since\n            //the exports in here is amdefine exports.\n            e = module.exports;\n            m = module;\n            r = makeRequire(requireFn, e, m, module.id);\n        }\n\n        //If there are dependencies, they are strings, so need\n        //to convert them to dependency values.\n        if (deps) {\n            deps = deps.map(function (depName) {\n                return r(depName);\n            });\n        }\n\n        //Call the factory with the right dependencies.\n        if (typeof factory === 'function') {\n            result = factory.apply(m.exports, deps);\n        } else {\n            result = factory;\n        }\n\n        if (result !== undefined) {\n            m.exports = result;\n            if (id) {\n                loaderCache[id] = m.exports;\n            }\n        }\n    }\n\n    stringRequire = function (systemRequire, exports, module, id, relId) {\n        //Split the ID by a ! so that\n        var index = id.indexOf('!'),\n            originalId = id,\n            prefix, plugin;\n\n        if (index === -1) {\n            id = normalize(id, relId);\n\n            //Straight module lookup. If it is one of the special dependencies,\n            //deal with it, otherwise, delegate to node.\n            if (id === 'require') {\n                return makeRequire(systemRequire, exports, module, relId);\n            } else if (id === 'exports') {\n                return exports;\n            } else if (id === 'module') {\n                return module;\n            } else if (loaderCache.hasOwnProperty(id)) {\n                return loaderCache[id];\n            } else if (defineCache[id]) {\n                runFactory.apply(null, defineCache[id]);\n                return loaderCache[id];\n            } else {\n                if(systemRequire) {\n                    return systemRequire(originalId);\n                } else {\n                    throw new Error('No module with ID: ' + id);\n                }\n            }\n        } else {\n            //There is a plugin in play.\n            prefix = id.substring(0, index);\n            id = id.substring(index + 1, id.length);\n\n            plugin = stringRequire(systemRequire, exports, module, prefix, relId);\n\n            if (plugin.normalize) {\n                id = plugin.normalize(id, makeNormalize(relId));\n            } else {\n                //Normalize the ID normally.\n                id = normalize(id, relId);\n            }\n\n            if (loaderCache[id]) {\n                return loaderCache[id];\n            } else {\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\n\n                return loaderCache[id];\n            }\n        }\n    };\n\n    //Create a define function specific to the module asking for amdefine.\n    function define(id, deps, factory) {\n        if (Array.isArray(id)) {\n            factory = deps;\n            deps = id;\n            id = undefined;\n        } else if (typeof id !== 'string') {\n            factory = id;\n            id = deps = undefined;\n        }\n\n        if (deps && !Array.isArray(deps)) {\n            factory = deps;\n            deps = undefined;\n        }\n\n        if (!deps) {\n            deps = ['require', 'exports', 'module'];\n        }\n\n        //Set up properties for this module. If an ID, then use\n        //internal cache. If no ID, then use the external variables\n        //for this node module.\n        if (id) {\n            //Put the module in deep freeze until there is a\n            //require call for it.\n            defineCache[id] = [id, deps, factory];\n        } else {\n            runFactory(id, deps, factory);\n        }\n    }\n\n    //define.require, which has access to all the values in the\n    //cache. Useful for AMD modules that all have IDs in the file,\n    //but need to finally export a value to node based on one of those\n    //IDs.\n    define.require = function (id) {\n        if (loaderCache[id]) {\n            return loaderCache[id];\n        }\n\n        if (defineCache[id]) {\n            runFactory.apply(null, defineCache[id]);\n            return loaderCache[id];\n        }\n    };\n\n    define.amd = {};\n\n    return define;\n}\n\nmodule.exports = amdefine;\n\n}).call(this,require('_process'),\"/node_modules/amdefine/amdefine.js\")\n\n},{\"_process\":4,\"path\":3}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Color Contast Checker\n * An accessibility checker tool for validating the color contrast based on WCAG 2.0 standard.\n * var ccc = new ColorContrastChecker();\n\n * var color1 = \"#FFFFFF\";\n * var color2 = \"#000000;\n\n * if (ccc.isLevelAA(color1, color2, 14)) {\n *     alert(\"Valid Level AA\");\n * } else {\n *     alert(\"Invalid Contrast\");\n * }\n */\n\nvar amdefine = false;\nif (typeof define !== 'function')\n    var define = require('amdefine')(module, require),\n        amdefine = true;\n\ndefine(function (require, exports, module) {\n\n    var ColorContrastChecker = function() {};\n\n    ColorContrastChecker.prototype = {\n        fontSize: 14,\n        rgbClass : {\n            toString: function() {\n                return '<r: ' + this.r +\n                    ' g: ' + this.g +\n                    ' b: ' + this.b +\n                    ' >';\n            }\n        },\n        isValidSixDigitColorCode: function (hex){\n            var regSixDigitColorcode = /^(#)?([0-9a-fA-F]{6})([0-9a-fA-F]{6})?$/;\n            return regSixDigitColorcode.test(hex);\n        },\n        isValidThreeDigitColorCode: function (hex){\n            var regThreeDigitColorcode = /^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$/;\n            return regThreeDigitColorcode.test(hex);\n        },\n        isValidColorCode : function (hex){\n            return this.isValidSixDigitColorCode(hex) || this.isValidThreeDigitColorCode(hex);\n        },\n        convertColorToSixDigit: function (hex) {\n          return '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n        },\n        hexToLuminance: function (color) {\n            if (!this.isValidColorCode(color)) {\n                throw new Error(\"Invalid Color :\" + color);\n            }\n\n            if (this.isValidThreeDigitColorCode(color)) {\n              color = this.convertColorToSixDigit(color);\n            }\n\n            color = this.getRGBFromHex(color);\n\n            var LRGB = this.calculateLRGB(color);\n\n            return this.calculateLuminance(LRGB);\n        },\n        check: function (colorA, colorB, fontSize) {\n            if (typeof fontSize !== 'undefined') {\n                this.fontSize = fontSize;\n            }\n\n            if(!colorA || !colorB) {\n                return false;\n            }\n\n            var l1 = this.hexToLuminance(colorA); /* higher value */\n            var l2 = this.hexToLuminance(colorB); /* lower value */\n            var contrastRatio = this.getContrastRatio(l1, l2);\n\n            return this.verifyContrastRatio(contrastRatio);\n        },\n        checkPairs: function (pairs) {\n            var results = [];\n\n            for (var i in pairs) {\n                var pair = pairs[i];\n                if (typeof pair.fontSize !== 'undefined') {\n                    results.push(\n                        this.check(\n                            pair.colorA,\n                            pair.colorB,\n                            pair.fontSize\n                        )\n                    );\n                } else {\n                    results.push(\n                        this.check(\n                            pair.colorA,\n                            pair.colorB\n                        )\n                    );\n                }\n            }\n            return results;\n        },\n        calculateLuminance: function(lRGB) {\n            return (0.2126 * lRGB.r) + (0.7152 * lRGB.g) + (0.0722 * lRGB.b);\n        },\n        isLevelAA : function(colorA, colorB, fontSize) {\n            var result = this.check(colorA, colorB, fontSize);\n            return result.WCAG_AA;\n        },\n        isLevelAAA : function(colorA, colorB, fontSize) {\n            var result = this.check(colorA, colorB, fontSize);\n            return result.WCAG_AAA;\n        },\n        getRGBFromHex : function(color) {\n\n            var rgb = Object.create(this.rgbClass),\n                rVal,\n                gVal,\n                bVal;\n\n            if (typeof color !== 'string') {\n                throw new Error('must use string');\n            }\n\n            rVal = parseInt(color.slice(1, 3), 16);\n            gVal = parseInt(color.slice(3, 5), 16);\n            bVal = parseInt(color.slice(5, 7), 16);\n\n            rgb.r = rVal;\n            rgb.g = gVal;\n            rgb.b = bVal;\n\n            return rgb;\n        },\n        calculateSRGB : function(rgb) {\n            var sRGB = Object.create(this.rgbClass),\n                key;\n\n            for (key in rgb) {\n                if (rgb.hasOwnProperty(key)) {\n                    sRGB[key] = parseFloat((rgb[key] / 255), 10);\n                }\n            }\n\n            return sRGB;\n        },\n        calculateLRGB: function (rgb) {\n            var sRGB = this.calculateSRGB(rgb);\n            var lRGB = Object.create(this.rgbClass),\n                key,\n                val = 0;\n\n            for (key in sRGB) {\n                if (sRGB.hasOwnProperty(key)) {\n                    val = parseFloat(sRGB[key], 10);\n                    if (val <= 0.03928) {\n                        lRGB[key] = (val / 12.92);\n                    } else {\n                        lRGB[key] = Math.pow(((val + 0.055) / 1.055), 2.4);\n                    }\n                }\n            }\n\n            return lRGB;\n        },\n        getContrastRatio : function(lumA, lumB) {\n            var ratio,\n                lighter,\n                darker;\n\n            if (lumA >= lumB) {\n                lighter = lumA;\n                darker = lumB;\n            } else {\n                lighter = lumB;\n                darker = lumA;\n            }\n\n            ratio = (lighter + 0.05) / (darker + 0.05);\n\n            return ratio;\n        },\n        verifyContrastRatio : function(ratio) {\n\n\n            var resultsClass = {\n                toString: function() {\n                    return '< WCAG-AA: ' + ((this.WCAG_AA) ? 'pass' : 'fail') +\n                        ' WCAG-AAA: ' + ((this.WCAG_AAA) ? 'pass' : 'fail') +\n                        ' >';\n                }\n            };\n            var WCAG_REQ_RATIO_AA_LG = 3.0,\n                WCAG_REQ_RATIO_AA_SM = 4.5,\n                WCAG_REQ_RATIO_AAA_LG = 4.5,\n                WCAG_REQ_RATIO_AAA_SM = 7.0,\n                WCAG_FONT_CUTOFF = 18;\n\n            var results = Object.create(resultsClass),\n                fontSize = this.fontSize || 14;\n\n            if (fontSize >= WCAG_FONT_CUTOFF) {\n                results.WCAG_AA = (ratio >= WCAG_REQ_RATIO_AA_LG);\n                results.WCAG_AAA = (ratio >= WCAG_REQ_RATIO_AAA_LG);\n            } else {\n                results.WCAG_AA = (ratio >= WCAG_REQ_RATIO_AA_SM);\n                results.WCAG_AAA = (ratio >= WCAG_REQ_RATIO_AAA_SM);\n            }\n\n            return results;\n        }\n\n    };\n\n    return ColorContrastChecker;\n});\n\n},{\"amdefine\":1}],3:[function(require,module,exports){\n(function (process){\n// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require('_process'))\n\n},{\"_process\":4}],4:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],5:[function(require,module,exports){\n/**\n * A11y color fieldtype plugin for Craft CMS\n *\n * A11ycolor Field JS\n *\n * @author    Iain Bean\n * @copyright Copyright (c) 2018 Iain Bean\n * @link      https://iainbean.com\n * @package   A11yColorFieldtype\n * @since     1.0.0A11yColorFieldtypeA11ycolor\n */\n\nvar ColorContrastChecker = require('color-contrast-checker');\n\n(function ($, window, document, undefined) {\n  var pluginName = 'A11yColorField';\n  var defaults = {};\n\n  // Plugin constructor\n  function Plugin(element, options) {\n    this.element = element;\n\n    this.options = $.extend({}, defaults, options);\n\n    this._defaults = defaults;\n    this._name = pluginName;\n\n    this.init();\n  }\n\n  Plugin.prototype = {\n    init: function (id) {\n      var _this = this;\n\n      this.colorContrastChecker = new ColorContrastChecker();\n\n      $(function () {\n        var $colorFieldContainer = $(_this.element);\n\n        _this.$colorField = $colorFieldContainer.find('[name=\"fields[' + _this.options.id + ']\"]');\n\n        // Add event listener for input events on any input in the container:\n        // This is either the <input type=\"color\"> or the <input type=\"text\">\n        // next to it\n        $colorFieldContainer.on('input', 'input', $.proxy(_this.updateColorContrast, _this));\n      });\n    },\n\n    updateColorContrast: function (event) {\n      var contrastColor = this.options.contrastColor;\n      var fieldColor = event.currentTarget.value;\n      var fontSize = this.options.fontSize === 'large' ? 22 : 14;\n\n      // Check if this is a valid 3 or 6 character hex code\n      if (this.colorContrastChecker.isValidColorCode(fieldColor)) {\n        // Get the ratio\n        var l1 = this.colorContrastChecker.hexToLuminance(contrastColor); /* higher value */\n        var l2 = this.colorContrastChecker.hexToLuminance(fieldColor); /* lower value */\n        var contrastRatio = this.colorContrastChecker.getContrastRatio(l1, l2);\n        // Is it valid?\n        console.log(this.colorContrastChecker.check(contrastColor, fieldColor, fontSize));\n      } else {\n        console.log('Invalid Hex');\n      }\n    }\n  };\n\n  // A really lightweight plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, 'plugin_' + pluginName)) {\n        $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n      }\n    });\n  };\n})(jQuery, window, document);\n\n},{\"color-contrast-checker\":2}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}